#include <iostream>
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <stb/stb_image.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

// ¬ключение ваших классов Shader, Texture, VAO, VBO, EBO
#include "shaderClass.h"
#include "Texture.h"
#include "VAO.h"
#include "VBO.h"
#include "EBO.h"

const unsigned int width = 800;
const unsigned int height = 800;

// ќбновленный массив вершин и индексов
GLfloat vertices[] = {
    // Front face
    -0.5f, 0.0f, 0.5f,    0.9f, 0.5f, 0.37f,  0.0f, 0.0f, // 0
    -0.5f, 1.0f, 0.5f,    0.9f, 0.5f, 0.37f,  0.0f, 1.0f, // 1
     0.5f, 1.0f, 0.5f,    0.9f, 0.9f, 0.02f,  1.0f, 1.0f, // 2
     0.5f, 0.0f, 0.5f,    0.8f, 0.45f, 0.07f, 1.0f, 0.0f, // 3

    // Back face
    -0.5f, 0.0f, -0.5f,   0.9f, 0.5f, 0.37f,  0.0f, 0.0f, // 4
    -0.5f, 1.0f, -0.5f,   0.9f, 0.5f, 0.37f,  0.0f, 1.0f, // 5
     0.5f, 1.0f, -0.5f,   0.9f, 0.9f, 0.02f,  1.0f, 1.0f, // 6
     0.5f, 0.0f, -0.5f,   0.8f, 0.45f, 0.07f, 1.0f, 0.0f, // 7

    // Left face
    -0.5f, 0.0f, -0.5f,   0.9f, 0.5f, 0.37f,  0.0f, 0.0f, // 8
    -0.5f, 1.0f, -0.5f,   0.9f, 0.5f, 0.37f,  0.0f, 1.0f, // 9
    -0.5f, 1.0f, 0.5f,    0.9f, 0.9f, 0.02f,  1.0f, 1.0f, //10
    -0.5f, 0.0f, 0.5f,    0.8f, 0.45f, 0.07f, 1.0f, 0.0f, //11

    // Right face
     0.5f, 0.0f, -0.5f,   0.9f, 0.5f, 0.37f,  0.0f, 0.0f, //12
     0.5f, 1.0f, -0.5f,   0.9f, 0.5f, 0.37f,  0.0f, 1.0f, //13
     0.5f, 1.0f, 0.5f,    0.9f, 0.9f, 0.02f,  1.0f, 1.0f, //14
     0.5f, 0.0f, 0.5f,    0.8f, 0.45f, 0.07f, 1.0f, 0.0f, //15

    // Bottom face
    -0.5f, 0.0f, -0.5f,   0.9f, 0.5f, 0.37f,  0.0f, 0.0f, //16
     0.5f, 0.0f, -0.5f,   0.9f, 0.5f, 0.37f,  1.0f, 0.0f, //17
     0.5f, 0.0f, 0.5f,    0.9f, 0.9f, 0.02f,  1.0f, 1.0f, //18
    -0.5f, 0.0f, 0.5f,    0.8f, 0.45f, 0.07f, 0.0f, 1.0f, //19

    // Top face
    -0.5f, 1.0f, -0.5f,   0.9f, 0.5f, 0.37f,  0.0f, 0.0f, //20
     0.5f, 1.0f, -0.5f,   0.9f, 0.5f, 0.37f,  1.0f, 0.0f, //21
     0.5f, 1.0f, 0.5f,    0.9f, 0.9f, 0.02f,  1.0f, 1.0f, //22
    -0.5f, 1.0f, 0.5f,    0.8f, 0.45f, 0.07f, 0.0f, 1.0f  //23
};

GLuint indices[] = {
    // Front face
    0, 1, 2,
    2, 3, 0,

    // Back face
    4, 5, 6,
    6, 7, 4,

    // Left face
    8, 9,10,
    10,11, 8,

    // Right face
    12,13,14,
    14,15,12,

    // Bottom face
    16,17,18,
    18,19,16,

    // Top face
    20,21,22,
    22,23,20
};

int main()
{
    // Initialize GLFW
    if (!glfwInit())
    {
        std::cout << "Failed to initialize GLFW" << std::endl;
        return -1;
    }

    // Configure GLFW: OpenGL 3.3 Core Profile
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    // Create a GLFWwindow object
    GLFWwindow* window = glfwCreateWindow(width, height, "Cube Test", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    // Initialize GLAD
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // Configure the viewport
    glViewport(0, 0, width, height);

    // Enable depth testing for proper 3D rendering
    glEnable(GL_DEPTH_TEST);

    // Create Shader Program
    Shader shaderProgram("default.vert", "default.frag");

    // Create VAO, VBO, and EBO
    VAO VAO1;
    VAO1.Bind();

    VBO VBO1(vertices, sizeof(vertices));
    EBO EBO1(indices, sizeof(indices));

    // Link vertex attributes
    VAO1.LinkAttrib(VBO1, 0, 3, GL_FLOAT, 8 * sizeof(float), (void*)0);                // Position
    VAO1.LinkAttrib(VBO1, 1, 3, GL_FLOAT, 8 * sizeof(float), (void*)(3 * sizeof(float))); // Color
    VAO1.LinkAttrib(VBO1, 2, 2, GL_FLOAT, 8 * sizeof(float), (void*)(6 * sizeof(float))); // Texture Coord

    // Unbind VAO, VBO, and EBO
    VAO1.Unbind();
    VBO1.Unbind();
    EBO1.Unbind();

    // Get the uniform location for "scale" (if used in shader)
    GLuint uniID = glGetUniformLocation(shaderProgram.ID, "scale");

    // Load and create a texture
    Texture twoBoobs("good_bot.jpeg", GL_TEXTURE_2D, GL_TEXTURE0, GL_RGB, GL_UNSIGNED_BYTE);
    twoBoobs.texUnit(shaderProgram, "tex0", 0);

    float rotation = 0.0f;
    double prevTime = glfwGetTime();

    // Main rendering loop
    while (!glfwWindowShouldClose(window))
    {
        // Clear the color and depth buffers
        glClearColor(0.12f, 0.42f, 0.68f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // Activate the shader program
        shaderProgram.Activate();

        // Update rotation angle based on time
        double crntTime = glfwGetTime();
        if (crntTime - prevTime >= 1.0 / 60.0) // Limit to ~60 FPS
        {
            rotation += 0.5f;
            prevTime = crntTime;
        }

        // Create transformation matrices
        glm::mat4 model = glm::mat4(1.0f);
        glm::mat4 view  = glm::mat4(1.0f);
        glm::mat4 proj  = glm::mat4(1.0f);

        model = glm::rotate(model, glm::radians(rotation), glm::vec3(0.0f, 1.0f, 0.0f));
        view  = glm::translate(view, glm::vec3(0.0f, -0.5f, -2.0f));
        proj  = glm::perspective(glm::radians(45.0f), (float)width / (float)height, 0.1f, 100.0f);

        // Pass transformation matrices to the shader
        int modelLoc = glGetUniformLocation(shaderProgram.ID, "model");
        glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));

        int viewLoc = glGetUniformLocation(shaderProgram.ID, "view");
        glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));

        int projLoc = glGetUniformLocation(shaderProgram.ID, "proj");
        glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(proj));

        // Pass scale uniform (if used)
        glUniform1f(uniID, 0.5f);

        // Bind texture
        twoBoobs.Bind();

        // Bind VAO and draw the cube
        VAO1.Bind();
        glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(GLuint), GL_UNSIGNED_INT, 0);

        // Swap buffers and poll events
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // Clean up resources
    VAO1.Delete();
    VBO1.Delete();
    EBO1.Delete();
    twoBoobs.Delete();
    shaderProgram.Delete();

    // Destroy window and terminate GLFW
    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}
